<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nilonger&#39;s Blog</title>
  
  
  <link href="http://nilonger.github.io/atom.xml" rel="self"/>
  
  <link href="http://nilonger.github.io/"/>
  <updated>2021-09-08T12:25:05.923Z</updated>
  <id>http://nilonger.github.io/</id>
  
  <author>
    <name>nilonger</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多安装mysql8</title>
    <link href="http://nilonger.github.io/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/"/>
    <id>http://nilonger.github.io/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/</id>
    <published>2021-08-19T12:27:00.000Z</published>
    <updated>2021-09-08T12:25:05.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原本已安装mysql5.7，原本可以试着删除5.7版本的，但是里面保存了一些数据不想删掉，还有数据库的卸载也是一个很奇怪的过程，一不小心删不干净就很难再安装了，所以就想着再安装一个8.0就好了，原本以为只是改一下端口而已，但是在这个过程还是出现了很多问题，然后我尝试了很多种过程，在这里就讲一下自己的最后一遍，可能和网上别人的步骤有点出入。</p><p>先把之前的5.7的服务关掉（为什么要关掉，我也不知道，我已经被折磨的不行了，就试一下），在任务管理器的服务一栏可以找到</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712210754138-860342263.png" alt="img"></p><h1 id="下载mysql8-0的解压版"><a href="#下载mysql8-0的解压版" class="headerlink" title="下载mysql8.0的解压版"></a>下载mysql8.0的解压版</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://dev.mysql.com/downloads/mysql/">MySQL :: Download MySQL Community Server</a></p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712203558843-1156551624.png" alt="img"></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712203800083-1637318666.png" alt="img"></p><h1 id="文件内容准备"><a href="#文件内容准备" class="headerlink" title="文件内容准备"></a>文件内容准备</h1><p>开始没有data和my.ini文件。</p><p>网上说data文件夹不需要自己手动创，不然报错什么的，我也试了这个做法，但是后面一直出现无法链接本地主机什么的错误，后面还有说到这个问题然后我就重新来，在最开始的时候自己手动创建了一个空的data</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712203845243-2060034466.png" alt="img"></p><h2 id="创建并编辑my-ini文件"><a href="#创建并编辑my-ini文件" class="headerlink" title="创建并编辑my.ini文件"></a>创建并编辑my.ini文件</h2><p>这里为mysql8设置3307端口，因为5.7版本的占用了3306端口。</p><p>可以进入cmd（不需要管理员权限）：输入  Netstat -ano|findstr 3307 查看3307是否被占用，没有则什么都不会返回，我们就可以使用这个端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 这里设置3307端口</span><br><span class="line">port=3307</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=D:\MySQL\mysql-8.0.25-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir=D:\MySQL\mysql-8.0.25-winx64\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=200</span><br><span class="line"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span><br><span class="line">max_connect_errors=10</span><br><span class="line"># 服务端使用的字符集默认为UTF8</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 默认使用“mysql_native_password”插件认证</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[client]</span><br><span class="line"># 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h2 id="增加环境变量"><a href="#增加环境变量" class="headerlink" title="增加环境变量"></a>增加环境变量</h2><p>右键电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;找到path-&gt;添加路径（D:\MySQL\mysql-8.0.25-winx64\bin），路径看自己的安装情况，主要就是方便后面在cmd中的切换，也可以不用设置</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712205238500-612600990.png" alt="img"></p><h1 id="玄学开始"><a href="#玄学开始" class="headerlink" title="玄学开始"></a>玄学开始</h1><h2 id="data文件夹"><a href="#data文件夹" class="headerlink" title="data文件夹"></a>data文件夹</h2><p>多安装一个mysql是很玄学的事情，网上大多数情况都是不能手动添加data文件的，不然会报一个错误，所以我这里从一开始就没有自己创建过，都是等运行命令mysqld –initialize –console才让它自己生成data文件。然后这里我就说一下自己最后一遍的做法（成功案例），因为我一直在重复这个步骤，一直报错，说什么无法连接到localhost，我也不知道具体哪一步我错了，<strong>最后一次我成功了，我重头开始，换成开始就创建了一个空的data文件夹</strong></p><h2 id="初始化data文件"><a href="#初始化data文件" class="headerlink" title="初始化data文件"></a>初始化data文件</h2><h3 id="管理员身份运行"><a href="#管理员身份运行" class="headerlink" title="管理员身份运行"></a>管理员身份运行</h3><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712204603554-172710862.png" alt="img"></p><p>输入路径可以快速切换到bin目录</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712205618118-702209348.png" alt="img"></p><h3 id="输入初始化命令"><a href="#输入初始化命令" class="headerlink" title="输入初始化命令"></a>输入初始化命令</h3><p>mysqld –initialize –console</p><p>此时在之前创建的空data目录多了很多文件</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712210425710-583663310.png" alt="img"></p><h3 id="保留生成的密码串"><a href="#保留生成的密码串" class="headerlink" title="保留生成的密码串"></a>保留生成的密码串</h3><p> 初始化data文件夹之后会生成一个首次登陆的密码串：</p><p>不包含最前面的空格，有时候最后一个字符可能是分号“ ; ”，它也是密码的一部分，要一起输进去</p><p>如果看不清是英文字母“ l ”还是阿拉伯数字“ 1 ”，两者在cmd界面长得太像了，介意直接复制粘贴，或者复制到微信输入框，可以辨别清楚</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712210927427-1299147747.png" alt="img"></p><h2 id="创建、启动服务"><a href="#创建、启动服务" class="headerlink" title="创建、启动服务"></a>创建、启动服务</h2><p>mysqld –install mysql8（mysql8主要就是为了和之前5.7版本的服务名区分开来），然后开始服务：net start mysql8</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712211314017-816233443.png" alt="img"></p><p>在这里可能出现服务无法启动的情况：见下面描述</p><h3 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h3><p>首先win+r，输入 regedit  打开注册表，寻找路径：计算机\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\mysql8</p><p>修改imagePath的数据部分，格式和5.7版本的一样，我的5.7版本则是在上面的MySQL，可以打开查考一下</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712213239756-1868885668.png" alt="img"></p><h2 id="登录数据库"><a href="#登录数据库" class="headerlink" title="登录数据库"></a>登录数据库</h2><p> 开启服务成功之后就要去登录数据库了：mysql -uroot -P3307 -pC6.d5B;pt-v1</p><p>mysql -uroot -P3307 -p（前面生成的很奇怪的初始密码）</p><p>最后这一波操作就很灵性了，也是玄学之一。</p><p>如图所示，我被这个错误折磨了一下午ERROR 2003 (HY000): Can’t connect to MySQL server on ‘localhost:3307’ (10061)，网上的那些也说得奇奇怪怪，感觉和没说一样，然后我就试着停止服务，开始服务之后，再登录一次，居然成功了！！！芜湖起飞！！！可以看到，我什么都没改，却又成功了，停止和开启mysql8服务这个操作我试了半天了，试了无数次了，却在这个时候可以了。然后它为什么可以了，它和前面的操作的差别就在于上面所提到的的，我自己先创了一个空的data目录，，，一个一直被喷的做法却救了我，想无。</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712211504238-1313820542.png" alt="img"></p><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p> 既然进来mysql8数据库了，就修改一下密码（最后记得要分号）：</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘自己的密码’;</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712212255649-1610850423.png" alt="img"></p><p> 希望对你们有帮助，在这里我就建议就多试试，多试一下不同的安装过程，不要那么死板，一堆人说不可以这么做你就不敢或者不想去自己试一下，（其实要不是自己走投无路了，我也不会去试一试哈哈哈），反正data文件夹随便删，它不影响整体，还可以一直被创建。</p><p>两个服务同时开启互不影响</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712215542617-1888427885.png" alt="img"></p><p>登陆的时候只要提供不同的端口即可</p><p>mysql -uroot -P3307 -p</p><p><img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712215419808-801136299.png" alt="img"></p><p>mysql -uroot -P3306 -p</p><p> <img src="/2021/08/19/%E5%A4%9A%E5%AE%89%E8%A3%85mysql8/1961848-20210712215625636-1487753917.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;原本已安装mysql5.7，原本可以试着删除5.7版本的，但是里面保存了一些数据不想删掉，还有数据库的卸载也是一个很奇怪的过程，一不小心删不</summary>
      
    
    
    
    <category term="数据库" scheme="http://nilonger.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="安装多个MySQL" scheme="http://nilonger.github.io/tags/%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAMySQL/"/>
    
  </entry>
  
  <entry>
    <title>github actions自动部署</title>
    <link href="http://nilonger.github.io/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/"/>
    <id>http://nilonger.github.io/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/</id>
    <published>2021-07-31T17:36:01.000Z</published>
    <updated>2021-09-08T12:25:05.935Z</updated>
    
    <content type="html"><![CDATA[<p>使用github actions 自动部署的初衷</p><p>每一次修改或者新增文章的时候，都要毫不客气的进行素质三连，虽然不多，倒是久了就会觉得很烦，而且随着你文章的数目的增加，在本地编译完，生成public文件夹，通过hexo d推送到username.github.io 仓库的时间也原来越长，所以想通过github提供的自动部署来完成对博客源代码的托管和编译运行，生成静态界面。</p><h1 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h1><p>[Blogroot]：本地存放博客源码的文件夹路径，blog</p><p>[SourceRepo]：存放博客源码的私有仓库名</p><p>[SiteBlogRepo]：存放编译好的博客页面的公有仓库名，nilonger.github.io</p><p>[SiteUsername]：用户名</p><p>[SiteToken]：申请到的令牌码，</p><p>[GithubEmail]：与 github 绑定的主邮箱</p><h1 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h1><p>路径：点击头像，选择settings，选择 Developer settings</p><p>在personal access tokens这里，记得勾选repo</p><p><img src="/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/image-20210731181651321.png" alt="image-20210731181651321"></p><p>生成需要的token，注意token只能显示一次，之后无法查看，记得保存</p><p><img src="/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/image-20210731181751877.png" alt="image-20210731181751877"></p><p>注：如果不是选择长期的，我选择了30天，后面更新personal access token，直接从它提示你过期的邮箱里的链接进去就好了</p><p><strong>一样的先把重新生成的token记下来，不然后面看不到了</strong></p><p>然后点击更新token</p><p><img src="/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/image-20210829113320187.png" alt="image-20210829113320187"></p><p>记得修改博客根目录下的_config.yml文件里面的deploy项的token</p><p>然后重新 git 三连，记得修改推送到私有仓库</p><h1 id="创建私有仓库"><a href="#创建私有仓库" class="headerlink" title="创建私有仓库"></a>创建私有仓库</h1><p>用来保管博客的源代码</p><p><img src="/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/image-20210731181909075.png" alt="image-20210731181909075"></p><h1 id="配置depoly项"><a href="#配置depoly项" class="headerlink" title="配置depoly项"></a>配置depoly项</h1><p>打开站点配置文件（也就是博客根目录下的） <code>[Blogroot]/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">gitHub:</span> <span class="string">https://[GithubUsername]:[GithubToken]@github.com/[GithubUsername]/[GithubBlogRepo].git[,branch]</span></span><br><span class="line">    <span class="comment"># [,branch]为可选项，表示部署的分支</span></span><br></pre></td></tr></table></figure><p>比如我的是（我在token加几个？？？对我自己保密吧，你还是要用自己的token）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://nilonger:??dk8X??YA???@github.com/nilonger/nilonger.github.io.git,master</span></span><br></pre></td></tr></table></figure><h1 id="配置github-actions"><a href="#配置github-actions" class="headerlink" title="配置github actions"></a>配置github actions</h1><p>在 <code>[Blogroot]</code> 新建<code>.github</code> 文件夹，注意开头是有个<code>.</code> 的。然后在<code>.github</code> 内新建 <code>workflows</code> 文件夹，再在 <code>workflows</code> 文件夹内新建 <code>autodeploy.yml</code>, 在 <code>[Blogroot]/.github/workflows/autodeploy.yml</code> 里面输入，记得改对应的变量名</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;[GithubUsername]&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;[GithubEmail]&quot;</span></span><br><span class="line"><span class="string">        git clone https://github.com/[GithubUsername]/[GithubBlogRepo].git .deploy_git</span></span><br><span class="line"><span class="string">        # 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患</span></span><br><span class="line"><span class="string">        # =====注意.deploy_git前面有个空格=====</span></span><br><span class="line"><span class="string">        # 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件</span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br></pre></td></tr></table></figure><p>最后就剩下，重新设置远程仓库和分支、查看部署情况这两个内容，这里建议观看一下这一篇博客的讲解，比较详细，也有报错分析，不想自己再打一遍了</p><p><a href="https://akilar.top/posts/f752c86d/#Github-Action%E7%AE%80%E4%BB%8B">使用Github Action实现全自动部署 | Akilarの糖果屋</a></p><p>然后就可以愉快的享受自动部署的快乐了。</p><h1 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h1><p>修改或者新增一篇文章，push到远程仓库，看是否如我所愿</p><p>新建文章：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;测试github actions&quot;</span></span><br></pre></td></tr></table></figure><p>编写front-matter：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: github actions自动部署</span><br><span class="line">date: 2021-07-31 17:36:01</span><br><span class="line">tags: 测试自动部署</span><br><span class="line">categories: hexo博客</span><br></pre></td></tr></table></figure><p>再随便编写文章内容，我直接以这篇文章的内容为例</p><p>内容编写差不多之后，在命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交新文件(new)和被修改(modified)文件,到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交代码到本地仓库，加上注释</span></span><br><span class="line">git commit -m <span class="string">&quot;测试一下github actions&quot;</span></span><br><span class="line"><span class="comment"># 推送的远程仓库</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>到github查看私有仓库，会多出相应的内容</p><p><img src="/2021/07/31/%E6%B5%8B%E8%AF%95github-actions/image-20210731181049786.png" alt="image-20210731181049786"></p><p>这个时候大概等待半分钟左右（等待它帮我们编译），刷新一下你原本username.github.io的界面就可以看到新的博客啦，虽然还是要执行（素质三连）新的三个语句</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用github actions 自动部署的初衷&lt;/p&gt;
&lt;p&gt;每一次修改或者新增文章的时候，都要毫不客气的进行素质三连，虽然不多，倒是久了就会觉得很烦，而且随着你文章的数目的增加，在本地编译完，生成public文件夹，通过hexo d推送到username.github.</summary>
      
    
    
    
    <category term="hexo博客" scheme="http://nilonger.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="测试自动部署" scheme="http://nilonger.github.io/tags/%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://nilonger.github.io/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://nilonger.github.io/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-07-22T20:42:57.000Z</published>
    <updated>2021-09-08T12:25:05.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本地初始化"><a href="#本地初始化" class="headerlink" title="本地初始化"></a>本地初始化</h1><h2 id="下载Git，node-js，下载淘宝镜像cnpm"><a href="#下载Git，node-js，下载淘宝镜像cnpm" class="headerlink" title="下载Git，node.js，下载淘宝镜像cnpm"></a>下载Git，node.js，下载淘宝镜像cnpm</h2><p>注意:这里面我基本上都是用cnpm代替npm来安装,下载速度快</p><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p>node -v</p><p>npm  -v</p><p>cnpm config get registry</p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722121729965.png" alt="image-20210722121729965"></p><h2 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h2><p>全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722122027588.png" alt="image-20210722122027588"></p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722122128829.png" alt="image-20210722122128829"></p><p>检查安装情况：hexo -v，出现一下信息</p><p>hexo-cli: 4.3.0<br>os: win32 10.0.19042<br>node: 12.16.3<br>v8: 7.8.279.23-node.35<br>uv: 1.34.2<br>zlib: 1.2.11<br>brotli: 1.0.7<br>ares: 1.16.0<br>modules: 72<br>nghttp2: 1.40.0<br>napi: 5<br>llhttp: 2.0.4<br>http_parser: 2.9.3<br>openssl: 1.1.1g<br>cldr: 36.0<br>icu: 65.1<br>tz: 2019c<br>unicode: 12.1</p><p>接下来，进入到你要放博客的静态文件的位置，右键，选择 Git Bash Here，打开 Git Bash 之后，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog初始化创建，会在你所在位置(MyBlog)创建 blog 文件夹</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">cnpm install进一步安装hexo所需文件</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722123653572.png" alt="image-20210722123653572"></p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722124101492.png" alt="image-20210722124101492"></p><p>其中 source 就是存放后面我们写博客的源文件的文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean清除所有记录</span><br><span class="line">hexo generate生成静态网页</span><br><span class="line">hexo server启动服务,默认不加端口号是 4000, hexo server -p 80 表示端口号为 80</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722125039269.png" alt="image-20210722125039269"></p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722125625772.png" alt="image-20210722125625772"></p><p>浏览器输入：<a href="http://localhost:4000/">http://localhost:4000</a></p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722125225209.png" alt="image-20210722125225209"></p><p>按下 Ctrl+C 可以停止服务</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>首先我们进入到你的本地博客目录下的themes目录下</p><p>我们选择一下自己喜欢的主题，这里是Butterfly，克隆你选择的主题的GitHub仓库到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jerryc127/hexo-theme-butterfly.git</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722133947193.png" alt="image-20210722133947193"></p><p>然后修改你博客根目录（我的则是blog目录）下的_config.yml文件里的theme配置来更换使用的主题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">hexo-theme-butterfly</span></span><br></pre></td></tr></table></figure><p>还有就是我并没有网上说的那样，将Butterfly的配置文件_config.yml（路径：\themes\hexo-theme-butterfly\）移动到source/_data下，因为我尝试了一下，在移动之后的那个_data里面修改配置文件的话，我的看不到修改后的效果，所以后面的修改都还是在上述主题路径的那个配置文件里修改。</p><p>然后重新输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean清除所有记录</span><br><span class="line">hexo generate生成静态网页</span><br><span class="line">hexo server启动服务,默认不加端口号是 4000, hexo server -p 80 表示端口号为 80</span><br></pre></td></tr></table></figure><p>这里我报错了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure><p>查了一下需要再下载一些东西</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><h1 id="上传到gitee仓库（在维护，，，）"><a href="#上传到gitee仓库（在维护，，，）" class="headerlink" title="上传到gitee仓库（在维护，，，）"></a>上传到gitee仓库（在维护，，，）</h1><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722152720507.png" alt="image-20210722152720507"></p><h2 id="在项目根目录下安装git部署插件"><a href="#在项目根目录下安装git部署插件" class="headerlink" title="在项目根目录下安装git部署插件"></a>在项目根目录下安装git部署插件</h2><p>之后就可以使用 hexo deploy（或简写 hexo d）将项目部署到gitee远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>配置_config.yml文件，拉到最下面，输入我们创建的仓库地址（注意下面三个属性的分号之后都有一个空格）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://gitee.com/nilonger/blog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>然后就素质三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean清除所有记录</span><br><span class="line">hexo generate生成静态网页</span><br><span class="line">hexo d推送部署到gitee</span><br><span class="line">或者直接输入：</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>将项目部署到gitee远程仓库这一步骤会让你输入用户名和密码</p><h2 id="开启Gitee-Pages-静态网页托管服务"><a href="#开启Gitee-Pages-静态网页托管服务" class="headerlink" title="开启Gitee Pages 静态网页托管服务"></a>开启Gitee Pages 静态网页托管服务</h2><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722155727091.png" alt="image-20210722155727091"></p><p>裂开了，怎么在维护，再见，我去github了</p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722161525725.png" alt="image-20210722161525725"></p><h1 id="上传到github仓库"><a href="#上传到github仓库" class="headerlink" title="上传到github仓库"></a>上传到github仓库</h1><h2 id="创建仓库-1"><a href="#创建仓库-1" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>记得仓库名要规范：用户名+github.io</p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722172833230.png" alt="image-20210722172833230"></p><h2 id="复制github的路径"><a href="#复制github的路径" class="headerlink" title="复制github的路径"></a>复制github的路径</h2><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722180218722.png" alt="image-20210722180218722"></p><p>生成并配置一下ssh公钥，或者已经有公钥了，直接查找本机的ssh公钥，路径C:\Users\主机名\.ssh</p><p>修改_config.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type: git  repo:</span> <span class="string">git@github.com:nilonger/nilonger.github.io.git</span>  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>素质三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean清除所有记录</span><br><span class="line">hexo generate生成静态网页</span><br><span class="line">hexo d推送部署到github</span><br><span class="line">或者：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>记得选择yes</p><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210722180154137.png" alt="image-20210722180154137"></p><p>推送成功之后，就可以在浏览器输入下面链接，就可以打开了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nilonger.github.io</span><br></pre></td></tr></table></figure><h1 id="上传到github图片现实问题"><a href="#上传到github图片现实问题" class="headerlink" title="上传到github图片现实问题"></a>上传到github图片现实问题</h1><h2 id="安装hexo-asset-image插件"><a href="#安装hexo-asset-image插件" class="headerlink" title="安装hexo-asset-image插件"></a>安装<code>hexo-asset-image</code>插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>该插件用于在生成静态网页时生成正确的图片访问路径</p><h2 id="设置typora"><a href="#设置typora" class="headerlink" title="设置typora"></a>设置typora</h2><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210727183349248.png" alt="image-20210727183349248"></p><p>该设置目的：使图片保存在<code>.md</code>文件的同名文件夹下，且该同名文件夹和<code>.md</code>文件在同一个文件夹下。同时该设置可以方便的直接粘贴图片到文件中即可，图片路径会自动生成。</p><p>这个时候启动该服务 hexo s，在本地可能还是看到图片展示还有问题（可能我当时没有素质三连什么的，但完成第三部再回来再发布服务 hexo s 就可以在本地看到了），但是我们右键，点击检查，查看网页源代码是可以看到图片的路径已经改为我们设置的路径。这个时候不用管，hexo d 推到github就好了。</p><h2 id="修改hexo配置"><a href="#修改hexo配置" class="headerlink" title="修改hexo配置"></a>修改hexo配置</h2><p>找到博客根目录下的_config.yml，修改<code>post_asset_folder: false</code>为<code>post_asset_folder: true</code></p><p>该配置目的： 每次通过<code>hexo new 文件名</code>新建博客后，都会创建一个与文件同名的文件夹用于存放图片 ，与上面<code>typora</code>的配置一致</p><p>改了配置就要记得素质三连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p><img src="/2021/07/22/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/image-20210727190559748.png" alt="image-20210727190559748"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本地初始化&quot;&gt;&lt;a href=&quot;#本地初始化&quot; class=&quot;headerlink&quot; title=&quot;本地初始化&quot;&gt;&lt;/a&gt;本地初始化&lt;/h1&gt;&lt;h2 id=&quot;下载Git，node-js，下载淘宝镜像cnpm&quot;&gt;&lt;a href=&quot;#下载Git，node-js，下载淘</summary>
      
    
    
    
    <category term="hexo博客" scheme="http://nilonger.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客搭建" scheme="http://nilonger.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
